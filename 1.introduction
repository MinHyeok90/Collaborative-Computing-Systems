토픽 -> 이해 주 목표
1.토픽은 어떤것들이 있을까?
2.개념은? 프로세스는?

개요
컨텐츠 공유 시스템을 만들 때 어떻게 해야 하는가
어떤 이슈가 있고 어떤 원리, 구조로 이루어 지는가 ex) client, 변형p2p

어떤 topic이 있는가
  어떻게 디자인, 개발할 것인가 (다중 사용자 시스템을)
  개발할 때 풀어야 할 문제들은?
    ex)최대 사용자 문제 : 사용자들이 접속하면 성능저하문제발생 -> 해결하는 방법, 기술들.
======================================================================================
1강.
  기술의 발전 - 버려
    1980년 시작
    마이크로프로세서의 발전
    고성능 네트워크
    
  ★분산시스템의 정의
    독립적으로 돌아가는 여러 컴퓨터들의 집합(사용자들 입장에서는 하나의 시스템 또는 하나의 서비스로 보이는)
    주요 특징(측면)
      분산 시스템을 이루는 각 컴포넌트(컴퓨터)는 독립적이다
      유저(사람 혹은 프로그램)은 하나의 시스템을 다루는 것처럼 느껴진다.
  
  ★좋은 분산 시스템의 특징
    1)숨겨진다 : 많은 서로다른 컴퓨터들이 다르게 소통하지만, 유저에겐 숨겨진다.
    2)일관적이다 : 유저, app은 분산 시스템과 일관되고 균일한 상호작용이 가능하다.
     서로 컴퓨터들이 다르다 -> os 및 플랫폼 SW/HW적 특성이 다를 수 있다. 그것이 사용자에겐 상관없다. 언제 어디서건 동일한 서비스
    3)확장가능하다 : 좋은 분산 시스템은 상대적으로 쉽게 확장이 가능하다. - 사실 (디자인을 잘 하면)확장이 용이하다. 쉬워야 한다.
      1)각각의 독립적인 컴퓨터를 갖고서 2)동시에, 숨겨진 그 컴퓨터들이 하나의 완전한 시스템으로 참여해야 한다.
    4)지속 사용 가능하다 : 분산 시스템은 비록 일부분이 고장나도, 시스템은 정상적으로 사용할 수 있다.
    -------
    컴포넌트의 차이에 상관없이 하나의 서비스를 받는 것. 분산시스템은 분산된 사실을 숨겨야 한다.
    어디에서건 일관되고 동일한 방식으로 제공.

분산 시스템의 middleware
  SW 계층으로 구성되는 분산 시스템
    APP 응용 프로그램 < (여기에 위치한 소프트웨어) < OS 운영체제      //  (그림) 미들웨어.
    APP은 똑같은 interface제공받음. Middleware가 제공한 동일한 interface. -> 
      이 덕분에 서로 다른 Os위의 app(3개, 심지어 자기끼리 연동된 서로 다른 app)끼리 동일한 middleware위에서 상호작용, 통신이 가능해진다.
    ex)java, 라이브러리등
    middleware는 user에게 직접 제공도 가능하고, 서버 쪽에서만 돌아갈 수 도 있다.
    *middleware를 사용하면 서로 다른 OS에서 동작하는 분산시스템을 숨길 수 있다.
  
분산 시스템의 목표
  1.자원관리는 쉽고 빠르게 사용할 수 있게 하기.                 - 유저 기준. 내려갈수록 시스템 기준
  2.분산 사실 숨기기 (안보이게 가리기). 여러 컴퓨터에서 제공, 자원 프로세스
  3.개방성 : 표준 규약을 지키며 (여러 app위해. ex:웹, 브라우저)
  4.확장성 
    1.크기  : 사용자 수, 서버 갯수, 컴포넌트 수 등이 많아도 관리가 잘되는 특성
    2.지리적: 지구 어디에서나 이용가능한 특성 
    3.관리적
    
목적을 세분화해서 보자.
  목적1. 원격지에서 유저가 순쉽게 자원관리
      *그룹웨어 : 그룹이 같이 사용하는 소프트웨어
                  "동시에"사용, 편집할 수 있는
      연결성과 공유성의 증가 + 보안
      
  목적2. Transparenty. 분산사실 숨기기 : 잘 가리면 좋다.
      사용자 입장에서는 분산이란 사실을 알 필요가 없다.
      숨김 단계들(분산종류)
        1)접근, 표현상빅(os별, 문서별)
        2)지리적 위치   - url. 세부위치는 숨겨
        3)지리적 이동   - 스토리지 정보 저장서버 변경
        4)재이동        -   "
        5)복제
        6)동시성        - 2명 이상의 유저가 동시에 동일한 파일에 접근, 수정, 서버를 이용할 때. 락킹메커니즘 3개. 
        7)실패          - 서버접속 실패사실을 숨긴다.
        
      *어느정도로 숨겨야 할까? 모두 다 숨긴다고 좋은것은 아니다.
        ex)매일 받던 전자신문. 유저가 시간대역이 다른 곳으로 이동해 생기는 오루. -> 사용자 위치를 시스템에게 숨겼다.
          ->사용자의 현재위치는?.. ->좋지않은 예제
          
        지역적 예제) 서버는 샌프란시스코, 사용자는 암스테르담일때, 지역적인 특징을 숨길 수 있는가?
          정보전송에 상당한 시간 소모.
          해결책 -> 미리 이동 혹은 복사해둔다.
        =>숨기는게 좋지많은 않다.
  333333===============================================
  ex)서버가 죽으면 미들웨어는 계속 접근을 시도 -> 이유도 모르고 불가능함 -> 불편함 -> 사용성 하락.
    ->중간에 연결실패 안내를 하거나, 다른 서버로 연결을 시도한다.
  ex2)바쁘지만 근처에 있는 프린터와, 바쁘지 않지만 지구 반대편의 컴퓨터.
    ->사용자의 위치도 중요하다.
    
  목적3. Openness : 표준규약 지키기
    목표
      표준을 따라 만들어, 누가 만들건 서로 통신이 가능하게
      ex)컴퓨터 네트워크
    프로토콜로 정규화된 룰(법칙,역할).
    서비스는 일반적으로 인터페이스를 통해 세분화(specified)된다.  
      -IDL : Interface Definition Language : 분산시스테에서의 인터페이스 정의 언어.
      -
      -
    성질
      Interoperability : 상호운용성. 한 서비스 = 회사1컴포넌트 + 회사2컴포넌트
        -
      Portability : 이식성 한 서비스 한 회사 ...?
        -
      분산 시스템 오픈의 또다른 목표
        -사용성 : (가능한한 개발자는과는 다르게)서로 다른 구성 요소로부터 시스템을 구성하기 쉬워야한다
        -확장성 : 다른 구성요소들에 영향을 미치지 않으면서, 새로운 구성요소를 추가하거나 교체하는 것이 쉬워야 한다. 
        (MH:쉽게말해 관리하기 쉬워야 한다.)
    메카니즘으로부터 분리된 정책 -> 어떤 방식으로 서비스를 사용하는 기본 기능을 제공할 것인가.
      monolitic : 서비스 사용시 단일 기능처럼 된. 잘 분리되지 않는
      ex)www의 캐시, 웹캐시.
        ->캐싱 정책의 옵션을 조절가능 => 제공되는 옵션이 오직 캐시 용량뿐이라면... 캐시를 다양하게 사용하는 정책이 수정 불가
                                                                                          캐시 정보와 원본 정보의 일.관.성
                                                                                          캐시 data의 유지기간
      -
      -
    -
    
    우리가 필요한 것.
      정책과 메카니즘의 분리(구분)
      ex)웹 캐싱
          web : 스토어기능. 얼마나 저장될지, 옵션 파라미터 제공
          사용자로 하여금 자신이 원하는 policy를 개발, 삽입 사용.
      
  목적4. Scalability: 확장성
    확장성 문제(이슈)들은 어떤것이 있을까? : 1.크기 2.지리적 3.관리적(비기술적)
      -확장성
        -
      -
        -
        -
        -
      -
    크기의 문제
      -
      -
      -
      -
      -
      -
    지리적 문제
      -
      -
    관리적 문제
      -
    
    확장성을 제공하는 기술들
      크게 3가지 방법이 있슴!
        1.숨기기(통신지연)
        2.분산(하나를 쪼갠다)       ─┐
        3.복제(같은것을 여러 개로)  ─┴ 이 2개를 혼합해서 주로 사용한다.
      1)숨기는 방법
        -비동기 통신으로 구현. 다른 일 하며 응답 대기
          -인터럽트 기반 단일 스레드
          -멀티 스레드
        -기다리는 동안 할 일이 없다면 => 서버에서 할 일 과정을 client가 처리.
      
      2)분산방법
        DNS에게 지리적 위치를 분할. 각자가 필요한 만큼씩만 관리.
          제일 위에 있는 root에서부터 하나씩 처리.
        web예제 : 각 서버가 각 정보를 저장.
        
        ================4====================================
      3)복제 : 사용가능성을 높여준다. 로드 밸런싱(요청을 분산)
        캐싱 : 일반 복제와의 차이 - 캐싱  - 웹 브라우저. 클라이언트가 결정
                                          - 복제 - 서버가 사전에 복사(미국-한국)
        동기화문제를 해결해야 한다.
          ->하나의 복제품에 업데이트 발생 -> 불일치 발생
          *일관성을 유지하느라 정작 본 서비스가 힘들 수 있음. 그러나 불일치는 발생할 수 밖에 없다.
          그렇다면 어느정도의 불일치를 허용할 것인가. - 서비스 종류에 따라 다르다.
            -주식시세 -> 1초마다 동기화
            잘 변하지 않는 서비스(뉴스등...) -> 부분적 불일치 허용
      *보통 분산, 복제를 혼합해서 사용한다.
    
    함정 : pitfalls
      어느정도 생각하며 개발해야 한다.
      *쉽게 가정하는 실수들
        1.네트워크의 신뢰성
        2." 보안성
        3." 동일함(동일하드웨어, OS, 네트웤머신...)
        4.토폴로지(위상)의 무변화 (MH:사용환경의 무변화인듯) : 모바일 환경을 고려해야
        5.Latency zero
        6.무제한 전송률, 전송폭
        7.전송 cost = 0
        8.단 한명의 관리자
    
    분산 시스템의 종류
      분산된 계산 시스템
      분산된 정보 시스템
      분산된 pervasive(퍼짐) 시스템 : 모바일의 경우 어디서나 사용(헬스케어, 임베디드)
    
      분산 컴퓨팅 시스템
        -클러스터 컴퓨팅 : 한 곳에 모여있는 pc들 ex)회사 사무실
        -그리드 컴퓨팅  : 다른 곳에 흩어진 pc와 cpu활용
        -클라우드 컴퓨팅 :?
      분산 정보 시스템
        
      분산 퍼짐 시스템
        -모바일과 임베디드 시스템
        -이동가능한 분산
        -3가지 요구사항
          환경 변함
          ad hoc composition 기능
          자원의 공유
        -분산된 사실을 숨기지 않는다.
          -분산되어 있다는 걸 알리고 하는 것. 차라리 알리는게 나음.
          -IOT도 다 분산의 일부 - 정보, 모바일.. (계산x)
